vid and tinkercad on bottom 
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define TRIG_PIN    5
#define ECHO_PIN    18
#define SWITCH_PIN  4
#define PIR_PIN     19
#define BUZZER_PIN  2
#define LED_PIN     23
#define DIST_LIMIT  15

LiquidCrystal_I2C lcd(0x27, 16, 2);

// --- PIR timing variables ---
unsigned long lastPIRCycleTime = 0;
bool pirResetting = false;
unsigned long pirResetStartTime = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.print("System Initializing");
  delay(1000);
  lcd.clear();

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(SWITCH_PIN, INPUT_PULLUP);
  pinMode(PIR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);

  Serial.println("System Ready");
  lcd.print("System Ready");
  delay(1000);
  lcd.clear();
}

// ---------- ULTRASONIC SENSOR FUNCTION ----------
float handleUltrasonic() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  float distance = -1;

  if (duration > 0) {
    distance = duration * 0.034 / 2;
    Serial.print("Ultrasonic: ");
    Serial.print(distance);
    Serial.println(" cm");

    if (distance < DIST_LIMIT)
      digitalWrite(BUZZER_PIN, HIGH);
    else
      digitalWrite(BUZZER_PIN, LOW);
  } else {
    Serial.println("Ultrasonic: No echo");
    digitalWrite(BUZZER_PIN, LOW);
  }

  return distance;
}

// ---------- PIR SENSOR FUNCTION WITH AUTO RESET ----------
String handlePIR() {
  unsigned long currentTime = millis();

  // Every 5 seconds, enter a 2-second reset state
  if (!pirResetting && (currentTime - lastPIRCycleTime >= 5000)) {
    pirResetting = true;
    pirResetStartTime = currentTime;
    digitalWrite(LED_PIN, LOW);
    Serial.println("PIR: Entering Resetting state...");
    return "Resetting";
  }

  // Stay in reset state for 2 seconds
  if (pirResetting) {
    if (currentTime - pirResetStartTime < 1500) {
      digitalWrite(LED_PIN, LOW);
      return "Resetting";
    } else {
      pirResetting = false;
      delay(100);
      lastPIRCycleTime = currentTime; // restart 5s cycle
    }
  }

  // Normal PIR operation (when not resetting)
  bool motionDetected = digitalRead(PIR_PIN) == HIGH;
  if (motionDetected) {
    digitalWrite(LED_PIN, HIGH);
    return "Motion";
  } else {
    digitalWrite(LED_PIN, LOW);
    return "None";
  }
}

// ---------- MAIN LOOP ----------
void loop() {
  bool systemOn = (digitalRead(SWITCH_PIN) == LOW); // Active LOW toggle

  if (systemOn) {
    float distance = handleUltrasonic();
    String pirStatus = handlePIR();

    lcd.clear();
    lcd.setCursor(0, 0);
    if (distance >= 0)
      lcd.printf("Dist: %.1f cm", distance);
    else
      lcd.print("Dist: ---");

    lcd.setCursor(0, 1);
    lcd.print("PIR: ");
    lcd.print(pirStatus);

    Serial.println("======================");
    if (distance >= 0)
      Serial.printf("Distance: %.1f cm\n", distance);
    else
      Serial.println("Distance: ---");
    Serial.printf("PIR Status: %s\n", pirStatus.c_str());
    Serial.println("======================");

  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("SYSTEM OFF");
    Serial.println("SYSTEM OFF");

    digitalWrite(BUZZER_PIN, LOW);
    digitalWrite(LED_PIN, LOW);
    pirResetting = false;
  }

  delay(100);
}


video ->>
https://www.kapwing.com/videos/6900fa5acfa9c11cf8aeb057
https://www.kapwing.com/videos/6900fa5acfa9c11cf8aeb057
tinker cad ->>
https://www.tinkercad.com/things/0xEMeQ2iF94/editel?returnTo=%2Fdashboard&sharecode=xV3QXPhR1kFJrf1ETuCLj9j-zjhp4yV78a2fzzCrhWc


